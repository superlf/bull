【CAP理论】


【分布式事务】
    https://www.cnblogs.com/mayundalao/p/11798502.html
    一、两阶段提交（2PC）
        过程：需要引入协调者。
            如果事务在每个参与者都执行成功，协调者发送通知让参与者提交事务，否则回滚。
        隐患：
            1.同步阻塞：事务参与者等待其他参与者响应的时候处于同步阻塞状态，无法进行其他操作。
            2.单点问题：参与者等协调者发Commit命令时，协调者发生故障，参与者会一直等待。
            3.数据不一致：协调者只发送了部分Commit消息时网络异常，参与者之间会有数据异常。
            4.保守：任意一个节点失败整个事务失败，没有完善的容错机制。
    二、补偿事务（TCC）
        过程:
            Try:对业务系统做检测及资源预留；
            Confirm：业务系统做确认提交，默认Try成功Confirm一定成功；
            Cancel：业务执行错误，需要回滚的状态下取消业务，释放预留资源；
        隐患：
            Confirm和Cancel中都有可能失败。数据一致性差
    三、本地消息表（异步确认）
        过程：
            1.分布式事务操作一方完成写业务数据后向本地消息表发送一个消息，本地事务保证效益一定会写入本地消息表中；
            2.之后本地消息表中的消息转发到Kafka等消息队列中，如果转发成功则将消息从本地消息表中删除，否则继续重新转发；
            3.分布式事务小错另一方从消息队列中读取消息，并执行消息中的操作。
        缺点：
            消息表会耦合到业务系统中。
    四、MQ 事务消息
            过程：依赖于支持事务的MQ RocketMQ 原理也是基于二阶段提交